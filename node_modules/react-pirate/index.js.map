{"version":3,"file":"index.js","sources":["src/useInterval.js","src/useMount.js","src/usePrevious.js","src/useTimeout.js","src/useToggle.js","src/useUnmount.js","src/useUpdate.js"],"sourcesContent":["import { useEffect } from 'react'\n\n/**\n * Wraps `setInterval`. Triggers the function each interval.\n * @param {Function} fn function to call\n * @param {number} delay in milliseconds\n * @return {void}\n */\nexport default function useInterval(fn, delay) {\n  const savedCallback = useRef()\n\n  useEffect(() => {\n    savedCallback.current = fn\n  })\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n","import { useEffect } from 'react'\n\n/**\n * Triggers the function when the initial rendering occurs. You can pass options\n * in the second parameter:\n * - hook: by default uses the `useEffect` hook, but you can replace it with\n *   `useLayoutEffect` or `useMutationEffect` if needed.\n * @param {Function} fn function to call\n * @param {object} options\n * @return {void}\n */\nexport default function useMount(fn, { hook = useEffect } = {}) {\n  hook(() => void fn(), [])\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Stores a value and pass it back to the component on each render. Useful for\n * example to store a prop and compare it to the newest value.\n * @param {*} value\n * @return {*} the value stored\n */\nexport default function usePrevious(value) {\n  const ref = useRef()\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n","import { useEffect } from 'react'\n\n/**\n * Wraps `setTimeout`. Triggers the function after a given delay.\n * @param {Function} fn function to call\n * @param {number} delay in milliseconds\n * @return {void}\n */\nexport default function useTimeout(fn, delay) {\n  const savedCallback = useRef()\n\n  useEffect(() => {\n    savedCallback.current = fn\n  })\n\n  useEffect(() => {\n    function cb() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      const id = setTimeout(cb, delay)\n      return () => clearTimeout(id)\n    }\n  }, [delay])\n}\n","import { useState } from 'react'\n\n/**\n * Stores a boolean and offers methods to update it.\n * @param {boolean} initialValue\n * @return {object} a toggle object with the current value and update methods\n */\nexport default function useToggle(initialValue = true) {\n  const [value, setValue] = useState(initialValue)\n\n  return {\n    value,\n    setValue,\n    toggle: () => setValue(!value),\n    setTrue: () => setValue(true),\n    setFalse: () => setValue(false),\n  }\n}\n","import { useEffect } from 'react'\n\n/**\n * Triggers the function when the component is unmounted. You can pass options\n * in the second parameter:\n * - hook: by default uses the `useEffect` hook, but you can replace it with\n *   `useLayoutEffect` or `useMutationEffect` if needed.\n * @param {Function} fn function to call\n * @param {object} options\n * @return {void}\n */\nexport default function useUnmount(fn, { hook = useEffect } = {}) {\n  hook(() => fn, [])\n}\n","import { useRef, useEffect } from 'react'\n\n/**\n * Triggers the function when the component is updated. You can pass options\n * in the second parameter:\n * - hook: by default uses the `useEffect` hook, but you can replace it with\n *   `useLayoutEffect` or `useMutationEffect` if needed.\n * @param {Function} fn\n * @param {object} options\n * @return {void}\n */\nexport default function useUpdate(fn, { hook = useEffect } = {}) {\n  const mounting = useRef(true)\n  hook(() => {\n    if (mounting.current) {\n      mounting.current = false\n    } else {\n      fn()\n    }\n  })\n}\n"],"names":["useEffect","useRef","useState"],"mappings":";;;;;;AAEA;;;;;;AAMA,AAAe,SAAS,WAAW,CAAC,EAAE,EAAE,KAAK,EAAE;EAC7C,MAAM,aAAa,GAAG,MAAM,GAAE;;EAE9BA,eAAS,CAAC,MAAM;IACd,aAAa,CAAC,OAAO,GAAG,GAAE;GAC3B,EAAC;;EAEFA,eAAS,CAAC,MAAM;IACd,SAAS,IAAI,GAAG;MACd,aAAa,CAAC,OAAO,GAAE;KACxB;IACD,IAAI,KAAK,KAAK,IAAI,EAAE;MAClB,MAAM,EAAE,GAAG,WAAW,CAAC,IAAI,EAAE,KAAK,EAAC;MACnC,OAAO,MAAM,aAAa,CAAC,EAAE,CAAC;KAC/B;GACF,EAAE,CAAC,KAAK,CAAC,EAAC;CACZ;;ACtBD;;;;;;;;;AASA,AAAe,SAAS,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,GAAGA,eAAS,EAAE,GAAG,EAAE,EAAE;EAC9D,IAAI,CAAC,MAAM,KAAK,EAAE,EAAE,EAAE,EAAE,EAAC;CAC1B;;ACXD;;;;;;AAMA,AAAe,SAAS,WAAW,CAAC,KAAK,EAAE;EACzC,MAAM,GAAG,GAAGC,YAAM,GAAE;EACpBD,eAAS,CAAC,MAAM;IACd,GAAG,CAAC,OAAO,GAAG,MAAK;GACpB,EAAC;EACF,OAAO,GAAG,CAAC,OAAO;CACnB;;ACZD;;;;;;AAMA,AAAe,SAAS,UAAU,CAAC,EAAE,EAAE,KAAK,EAAE;EAC5C,MAAM,aAAa,GAAG,MAAM,GAAE;;EAE9BA,eAAS,CAAC,MAAM;IACd,aAAa,CAAC,OAAO,GAAG,GAAE;GAC3B,EAAC;;EAEFA,eAAS,CAAC,MAAM;IACd,SAAS,EAAE,GAAG;MACZ,aAAa,CAAC,OAAO,GAAE;KACxB;IACD,IAAI,KAAK,KAAK,IAAI,EAAE;MAClB,MAAM,EAAE,GAAG,UAAU,CAAC,EAAE,EAAE,KAAK,EAAC;MAChC,OAAO,MAAM,YAAY,CAAC,EAAE,CAAC;KAC9B;GACF,EAAE,CAAC,KAAK,CAAC,EAAC;CACZ;;ACtBD;;;;;AAKA,AAAe,SAAS,SAAS,CAAC,YAAY,GAAG,IAAI,EAAE;EACrD,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAGE,cAAQ,CAAC,YAAY,EAAC;;EAEhD,OAAO;IACL,KAAK;IACL,QAAQ;IACR,MAAM,EAAE,MAAM,QAAQ,CAAC,CAAC,KAAK,CAAC;IAC9B,OAAO,EAAE,MAAM,QAAQ,CAAC,IAAI,CAAC;IAC7B,QAAQ,EAAE,MAAM,QAAQ,CAAC,KAAK,CAAC;GAChC;CACF;;ACfD;;;;;;;;;AASA,AAAe,SAAS,UAAU,CAAC,EAAE,EAAE,EAAE,IAAI,GAAGF,eAAS,EAAE,GAAG,EAAE,EAAE;EAChE,IAAI,CAAC,MAAM,EAAE,EAAE,EAAE,EAAC;CACnB;;ACXD;;;;;;;;;AASA,AAAe,SAAS,SAAS,CAAC,EAAE,EAAE,EAAE,IAAI,GAAGA,eAAS,EAAE,GAAG,EAAE,EAAE;EAC/D,MAAM,QAAQ,GAAGC,YAAM,CAAC,IAAI,EAAC;EAC7B,IAAI,CAAC,MAAM;IACT,IAAI,QAAQ,CAAC,OAAO,EAAE;MACpB,QAAQ,CAAC,OAAO,GAAG,MAAK;KACzB,MAAM;MACL,EAAE,GAAE;KACL;GACF,EAAC;CACH;;;;;;;;;;"}